{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,OAAO;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,yBAAyB;AACzB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sCAAsC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;;;;;;;UEzLA;UACA;UACA;UACA;UACA","sources":["webpack://cursotypescript/./src/index.ts","webpack://cursotypescript/webpack/before-startup","webpack://cursotypescript/webpack/startup","webpack://cursotypescript/webpack/after-startup"],"sourcesContent":["\"use strict\";\n/**\n * string\n * number - enteros y decimales\n * boolean - true o false\n * null\n * undefined\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar nombre = \"Dani\"; // Variable global\nvar apellido = \"Garcia\"; // Variable local\nvar PI = 3.1415; // Constante\nconsole.log(\"Hola \" + nombre + \" \" + apellido);\nconsole.log(nombre, apellido);\nconsole.log(\"Hola \".concat(nombre));\n// ARRAYS\nvar nombres = [\"Dani\", \"Juan\", \"Pedro\"];\nvar valores = [1, 2, 3, 4, 5];\nvar datos = [\"Dani\", 1, \"Juan\", 2];\nvar alumnos1A = [\"Dani\", \"Juan\", \"Pedro\"];\nvar alumnos2A = [\"Dani\", \"Juan\"];\nvar alumnos = __spreadArray(__spreadArray(__spreadArray([], alumnos1A, true), alumnos2A, true), [\"Pablo\"], false);\nconsole.log(alumnos);\n//OBJETOS\nvar misDatos = {\n    nombre: \"Dani\",\n    apellido: \"Garcia\",\n    edad: 26\n};\nvar configuracion = __assign({ versionTS: \"Es6\", versionCodigo: 1.0 }, misDatos);\nconsole.log(configuracion);\nvar propiedad1 = configuracion.versionTS;\nvar propiedad2 = configuracion.versionCodigo;\nconsole.log(propiedad1, propiedad2);\nvar EstadoTarea;\n(function (EstadoTarea) {\n    EstadoTarea[EstadoTarea[\"Pendiente\"] = 0] = \"Pendiente\";\n    EstadoTarea[EstadoTarea[\"EnProceso\"] = 1] = \"EnProceso\";\n    EstadoTarea[EstadoTarea[\"Terminada, Completada\"] = 2] = \"Terminada, Completada\";\n})(EstadoTarea || (EstadoTarea = {}));\n;\nvar estadoPendiente = EstadoTarea.Pendiente;\nconsole.log(estadoPendiente);\nvar tarea1 = {\n    nombre: \"Tarea1\",\n    prioridad: 2,\n    estado: EstadoTarea.Pendiente\n};\nvar empleado1 = {\n    nombre: \"Dani\",\n    edad: 26,\n    sueldo: 20000\n};\nconsole.log(empleado1);\nvar empleado3;\nempleado3 = {\n    nombre: \"Juan\",\n    edad: 30,\n    sueldo: 30000,\n    fotocopia: 100\n};\nconsole.log(empleado3);\nconsole.log(tarea1.estado === 0 ? \"La tarea \".concat(tarea1.nombre, \" est\\u00E1 pendiente\") : \"La tarea \".concat(tarea1.nombre, \" est\\u00E1 en proceso\"));\n// IF-ELSE\nif (tarea1.estado === 0) {\n    console.log(\"La tarea \".concat(tarea1.nombre, \" est\\u00E1 pendiente\"));\n}\nelse if (tarea1.estado === 1) {\n    console.log(\"La tarea \".concat(tarea1.nombre, \" est\\u00E1 en proceso\"));\n}\nelse {\n    console.log(\"La tarea \".concat(tarea1.nombre, \" est\\u00E1 terminada\"));\n}\n// SWITCH\nswitch (tarea1.estado) {\n    case 0:\n        console.log(\"La tarea \".concat(tarea1.nombre, \" est\\u00E1 pendiente\"));\n        break;\n    case 1:\n        console.log(\"La tarea \".concat(tarea1.nombre, \" est\\u00E1 en proceso\"));\n        break;\n    case 2:\n        console.log(\"La tarea \".concat(tarea1.nombre, \" est\\u00E1 terminada\"));\n        break;\n    default:\n        console.log(\"La tarea \".concat(tarea1.nombre, \" no tiene estado\"));\n        break;\n}\n//TRY CATCH\ntry {\n    var numero1 = 1;\n    console.log(numero1.toString());\n}\ncatch (error) {\n    console.log(\"Ha ocurrido un error al convertir el numero a string\");\n}\n//Activity 2\n/**\n * Crea una función en tu proyecto que reciba como parámetro un string llamado \"type\" que tendrá como valor por defecto \"SessionStorage\",\n *  un string llamado \"key\", un array de objetos Tarea llamado \"data\" . El funcionamiento de dicha función debe ser el siguiente:\n * dependiendo de si el valor del parámetro \"type\" es \"session\" o \"local\" se almacenará la información del array empleando el objeto \"SessionStorage\" o \"LocalStorage\".\n * La información del parámetro data se almacenará usando la key pasada como parámetro\n *\n * @param type Tipo de dato\n * @param key Clave\n * @param data Array de tareas\n */\nfunction activity2(type, key, data) {\n    if (type === void 0) { type = \"Session Storage\"; }\n    if (type == \"session\") {\n        sessionStorage.setItem(key, JSON.stringify(data));\n        console.log(\"Se guardaron los datos en Session Storage\");\n    }\n    else if (type == \"local\") {\n        localStorage.setItem(key, JSON.stringify(data));\n        console.log(\"Se guardaron los datos en Local Storage\");\n    }\n}\n//Activity 3\n/**\n * Ejecuta la función anterior usando pasándole como parámetro el valor de type \"session\", un array de Tareas, y como clave \"datos\". Además, deberás ejecutar de nuevo la  función pasándole como parámetro el valor de type \"local\", un array de Tareas, y como clave \"datos\".\n */\nactivity2(\"session\", \"datos\", [tarea1]);\nactivity2(\"local\", \"datos\", [tarea1]);\n//Activity 4\n/**\n * Crea una función en tu proyecto que permita la recuperar la información almacenada en SessionStorage y LocalStorage. Dicha función debe recibir dos parámetros: type que será un string y tendrá como valor por defecto \"session\", y un string llamado \"key\". El funcionamiento de la función debe ser el siguiente: dependiendo el valor de type, si es \"sessión\" o \"local\", se recuperará la información empleando el objeto \"SessionStorage\" o \"LocalStorage\" y la key pasada como parámetro.\n */\nfunction activity4(type, key) {\n    if (type === void 0) { type = \"session\"; }\n    if (type == \"session\") {\n        var data = sessionStorage.getItem(key);\n        console.log(data);\n    }\n    else if (type == \"local\") {\n        var data = localStorage.getItem(key);\n        console.log(data);\n    }\n}\n//Activity 5\n/**\n * Recupera la información almacenada en el navegador y muestrala por consola.\n */\nactivity4(\"session\", \"datos\");\nactivity4(\"local\", \"datos\");\n// Simulación de sessionStorage y localStorage en Node.js\nvar SimulacionsessionStorage = /** @class */ (function () {\n    function SimulacionsessionStorage() {\n        this.store = {};\n    }\n    SimulacionsessionStorage.prototype.setItem = function (key, value) {\n        this.store[key] = value;\n    };\n    SimulacionsessionStorage.prototype.getItem = function (key) {\n        return this.store[key] || null;\n    };\n    SimulacionsessionStorage.prototype.removeItem = function (key) {\n        delete this.store[key];\n    };\n    SimulacionsessionStorage.prototype.clear = function () {\n        this.store = {};\n    };\n    return SimulacionsessionStorage;\n}());\n// Crear instancias simuladas de sessionStorage y localStorage\nvar simulatedSessionStorage = new Storage();\nvar simulatedLocalStorage = new Storage();\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/index.ts\"]();\n",""],"names":[],"sourceRoot":""}